machine AuctionSystem2 refines AuctionSystem sees AuctionSystemContext

variables 
registeredUser				//Set of registered users
loggedInUser				//Set of registered users that are currently logged in
activeID					//Set of login IDs that belong to registered users
userName					//Set of total function from user to their name
userID						//Set of total bijective function from user to their login ID
userPassword				//Set of total function from user to their password
userPoints					//Set of total function from user to their penalty points
userFeedback				//Set of relation from user to their feedback
createdAuction				//Set of auctions that have been created
startedAuction				//Set of auctions that have started
cancelledAuction			//Set of auctions that were cancelled
endedAuction				//Set of auctions that have ended
auctionedItem				//Set of items being auctioned
auctionSeller				//Set of total function from auction to its seller
auctionItem					//Set of total bijective function from auction to its item
itemName					//Set of total function from item to its name
auctionStartTime			//Set of total function from auction to its start time
auctionEndTime				//Set of total function from auction to its end time
auctionTimer				//Set of partial function from auction to its timer
auctionReservePrice			//Set of total function from auction to its reserve price
auctionHighestBidder		//Set of partial function from auction to its highest bidder
auctionBid					//Set of relation from auction to its bids
auctionBidder				//Set of relation from auction to its bidders
auctionFeedbackEndTime		//Set of total function from auction to its feedback end time
auctionFeedbackTimer		//Set of partial function from auction to its feedback timer
auctionStatus				//Set of total function from auction to its state

invariants
	@inv26: auctionStartTime ∈ createdAuction → ℕ									
	@inv27: auctionEndTime ∈ createdAuction → ℕ 									
	@inv28: auctionTimer ∈ (createdAuction ∖ (endedAuction ∪ cancelledAuction)) → ℕ	
	@inv29: auctionFeedbackEndTime ∈ (endedAuction ∪ cancelledAuction) ⇸ ℕ
	@inv30: auctionFeedbackTimer ∈ (endedAuction ∪ cancelledAuction) ⇸ ℕ	
events
	event INITIALISATION extends INITIALISATION
	then
		@act9: auctionStartTime, auctionEndTime, auctionTimer ≔ ∅, ∅, ∅
		@act10: auctionFeedbackEndTime, auctionFeedbackTimer ≔ ∅, ∅
	end
	
	//Register users
  	event RegisterUser extends RegisterUser
  	end
  	
  	//Logs users in
  	event UserLogsIn extends UserLogsIn
	end
	
	//Logs users out
	event UserLogsOut extends UserLogsOut 
	end

	//Creates an auction with a start time an end time and a timer that keeps track of how long it has been created for
	event CreateAuction extends CreateAuction
 	any startTime endTime where
 		@grd7: startTime ∈ ℕ					//Start time of auction must be a natural number
		@grd8: endTime ∈ ℕ						//End time of auction must be a natural number
		@grd9: startTime < endTime				//Start time must be less than the end time
	then
		@act7: auctionStartTime ≔ auctionStartTime ∪ {auction ↦ startTime}
		@act8: auctionEndTime ≔ auctionEndTime ∪ {auction ↦ endTime}
		@act9: auctionTimer ≔ auctionTimer ∪ {auction ↦ 0}
 	end
 	
 	//Updates how long an auction has been created for
	event AuctionClock
	any auction where
		@grd1: auction ∈ createdAuction	∩ dom(auctionTimer)				//Auction must have been created and have a timer
		@grd2: auction ∉ endedAuction ∪ cancelledAuction				//Auction must not have ended already and must not have been cancelled
	then
		@act1: auctionTimer(auction) ≔ auctionTimer(auction) + 1
	end
	
	//Starts an auction when the auction's start time has been reached
	event StartAuction extends StartAuction
	where
		@grd4: auction ∈ dom(auctionTimer) ∩ dom(auctionStartTime)							//Auction must a have a timer and a start time
		@grd5: {auction ↦ auctionStartTime(auction)} = {auction ↦ auctionTimer(auction)}	//Auction's start time must match auction's timer
	end
	
	//Adds the first bid to an auction
	event FirstBidOnAuction extends FirstBidOnAuction
	end
	
	//Adds the 2nd, 3rd and so on bids to an auction
	event BidOnAuction extends BidOnAuction
	end
	
	//Cancels a penalty worthy auction and deletes its timer
	event CancelAuctionWithPenalty extends CancelAuctionWithPenalty
	any feedbackDuration biddersToInform where
		@grd6: feedbackDuration ∈ ℕ								//Duration of auction's feedback period must be a natural number
		@grd7: biddersToInform = auctionBid[{auction}]			//Determines all the bidders that need to be informed that the auction was cancelled
	
	then
		@act5: auctionTimer ≔ {auction} ⩤ auctionTimer
		@act6: auctionFeedbackTimer ≔ auctionFeedbackTimer ∪ {auction ↦ 0}
		@act7: auctionFeedbackEndTime ≔ auctionFeedbackEndTime ∪ {auction ↦ feedbackDuration}
	end
	
	//Cancels a non-penalty worthy auction and deletes its timer
	event CancelAuctionWithoutPenalty extends CancelAuctionWithoutPenalty
	any feedbackDuration biddersToInform where
		@grd6: feedbackDuration ∈ ℕ						//Duration of auction's feedback period must be a natural number
		@grd7: biddersToInform = auctionBid[{auction}]																										//Determines all the bidders that need to be informed that the auction was cancelled
	then
		@act4: auctionTimer ≔ {auction} ⩤ auctionTimer
		@act5: auctionFeedbackTimer ≔ auctionFeedbackTimer ∪ {auction ↦ 0}
		@act6: auctionFeedbackEndTime ≔ auctionFeedbackEndTime ∪ {auction ↦ feedbackDuration}
	end
	
	//Cancels an auction with no bids and deletes its timer
	event CancelAuctionWithoutBids extends CancelAuctionWithoutBids
	then
		@act4: auctionTimer ≔ {auction} ⩤ auctionTimer
	end
	
	//Views the status of an auction
	event viewAuctionStatus extends viewAuctionStatus
	end
	
	//Closes an auction with bids that failed when it's end time has been reached and starts keeping track of its feedback period
	event closeFailedAuctionWithBids extends closeFailedAuctionWithBids
	any feedbackDuration where
		@grd5: auction ∈ dom(auctionEndTime) ∩ dom(auctionTimer)							//Auction must have an end time and a timer
		@grd6: {auction ↦ auctionEndTime(auction)} = {auction ↦ auctionTimer(auction)}		//Auction's end time must match auction's timer
		@grd7: feedbackDuration ∈ ℕ															//Duration of auction's feedback period must be a natural number
	then
		@act4: auctionTimer ≔ {auction} ⩤ auctionTimer
		@act5: auctionFeedbackTimer ≔ auctionFeedbackTimer ∪ {auction ↦ 0}
		@act6: auctionFeedbackEndTime ≔ auctionFeedbackEndTime ∪ {auction ↦ feedbackDuration}
	end
	
	//Closes an auction without bids that failed when it's end time has been reached and starts keeping track of its feedback period
	event closeFailedAuctionWithoutBids extends closeFailedAuctionWithoutBids
	where
		@grd4: auction ∈ dom(auctionEndTime) ∩ dom(auctionTimer)							//Auction must have an end time and a timer
		@grd5: {auction ↦ auctionEndTime(auction)} = {auction ↦ auctionTimer(auction)}		//Auction's end time must match auction's timer
	then
		@act4: auctionTimer ≔ {auction} ⩤ auctionTimer
	end
	
	//Closes an auction that succeeded when it's end time has been reached and starts keeping track of its feedback period
	event closeSuccessfullAuction extends closeSuccessfullAuction
	any feedbackDuration where
		@grd6: auction ∈ dom(auctionEndTime) ∩ dom(auctionTimer) 		//Auction must have an end time and a timer
		@grd7: {auction ↦ auctionEndTime(auction)} = {auction ↦ auctionTimer(auction)}				//Auction's end time must match auction's timer
		@grd8: feedbackDuration ∈ ℕ																	//Duration of auction's feedback period must be a natural number
	then
		@act4: auctionTimer ≔ {auction} ⩤ auctionTimer
		@act5: auctionFeedbackTimer ≔ auctionFeedbackTimer ∪ {auction ↦ 0}
		@act6: auctionFeedbackEndTime ≔ auctionFeedbackEndTime ∪ {auction ↦ feedbackDuration}
	end	
	
	//Gives feedback to a seller during an auction's feedback period
	event giveSellerFeedback extends giveSellerFeedback
	where
		@grd4: auction ∈ dom(auctionFeedbackTimer)		//Auction's feedback duration must not have run out 
	end
		
	//Updates how long an auction's feedback period has been going for
	event FeedbackClock
	any auction where
		@grd1: auction ∈ endedAuction ∩ dom(auctionFeedbackTimer)			//Auction must have ended and have a feedback timer
	then
		@act1: auctionFeedbackTimer(auction) ≔ auctionFeedbackTimer(auction) + 1
	end
	
	//Ends an auction's feedback period
	event endFeedbackPeriod
	any auction where
		@grd1: auction ∈ endedAuction ∩ dom(auctionFeedbackTimer) ∩ dom(auctionFeedbackEndTime)			//Auction must have ended already, must have a feedback timer and must have a feedback end time
		@grd2: {auction ↦ auctionFeedbackEndTime(auction)} = {auction ↦ auctionFeedbackTimer(auction)}		//Auction's feedback end time must match auction's feedback timer
	then
		@act1: auctionFeedbackTimer ≔ {auction} ⩤ auctionFeedbackTimer
	end 
	
	//Checks an auction's history of bids
	event viewHistoryOfBids extends viewHistoryOfBids
	end
end